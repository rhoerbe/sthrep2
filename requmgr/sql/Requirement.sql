INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (1, 'Understand AssertionID Request', 1, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (2, 'Understand basic attribute query', 2, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (3, 'Understand basic attribute query (duplicate?)', 2, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (4, 'Understand "chained token" (delegator''s attributes)', 3, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (5, 'Understand optional attributes', 3, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (6, 'Provide attribute name formats of type URI, basic or X500 ', 4, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (7, 'Support persistent Nameid format', 5, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (8, 'Understand AuthnRequest using ECP and PAOS', 6, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (9, 'Use only fresh metadata', 7, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (10, 'MD Signature valid', 7, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (11, 'Load signature and TLS certificates from MD', 8, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (12, 'Valid roledescriptior exists', 9, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (13, 'Understand SP-first LogOutRequest', 10, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (14, 'Understand basic NameIDMapping request', 11, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (15, 'Understand ManageNameID Request to set SP provided ID', 11, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (16, 'TCP connectivity', 12, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (22, 'Endpoints accept only TLS connectons', 13, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (23, 'Derive TLS certificate from signed metadata', 13, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (24, 'Accept only valid TLS certificate', 13, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (25, 'Use only TLS ciphers satisfying ECRYPT Level 5 or better', 13, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (26, 'handle IdP-initiated LogoutRequest to SP before the authn Response', 14, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (27, 'Process IDP-first SLO Request ', 14, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (28, 'Accept LogoutRequest with no sessionindex (sent in separate session, no session-cookies)', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (29, 'Accept LogoutRequest with two sesionindexes (first valid) (sent in separate session, no session-cookies)', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (30, 'Accept LogoutRequest with two sesionindexes (second valid) (sent in separate session, no session-cookies)', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (31, 'Accept LogoutRequest with sessionindex in a separate session, not relying on the session-cookie.', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (32, 'Do not logout user when invalid SessionIndex is sent', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (33, 'Reject LogoutRequest when Destination is wrong', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (34, 'Reject LogoutRequest when Issuer is wrong', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (35, 'Reject LogoutRequest when NameID content is wrong', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (36, 'Reject LogoutRequest when NameID@Format is wrong', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (37, 'Reject LogoutRequest when NameID@SPNameQualifier is wrong', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (39, 'Understand SP-first LogOutRequest and logout 2nd SP', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (40, 'Require LogoutRequest from IDP to be signed', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (41, 'SP-first SLO Request with Redirect binding', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (42, 'Require <LogoutRequest> to be signed', 15, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (43, 'Require <Response> to be signed for the HTTP POST binding', 16, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (45, 'Understand ForceAuthn', 17, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (46, 'Understand POST binding of request', 17, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (47, 'Understand Redirect binding of request', 17, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (48, 'Issue conformant AuthnRequest', 17, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (49, 'Metadata contains <idpdisc:DiscoveryResponse> ', 18, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (50, 'Remember selected IDP', 18, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (51, 'Use non-SP discovery service', 18, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (52, 'Use SP-side discovery service', 18, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (53, 'authn_endpoint_index', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (55, 'Reuse existing IdP session to authenticate at second SP', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (57, 'Expire SP session  after <nnn> s timout', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (58, 'Expire IDP session  after <nnn> s timout', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (61, 'Accept a Response with a Condition with an additional Audience appended', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (62, 'Accept a Response with a Condition with an additional Audience prepended', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (63, 'Accept a Response with a SubjectConfirmationData elements with a correct @Address attribute', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (64, 'Accept a Response with multiple SubjectConfirmation elements with /SubjectConfirmationData/@Address-es, where only the first one is correct', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (65, 'Accept a Response with multiple SubjectConfirmation elements with /SubjectConfirmationData/@Address-es, where only the last one is correct', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (66, 'Accept a Response with multiple SubjectConfirmationData elements with /SubjectConfirmationData/@Address-es, where only the first one is correct', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (67, 'Accept a Response with multiple SubjectConfirmationData elements with /SubjectConfirmationData/@Address-es,where only the last one is correct', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (68, 'Accept a Response with two SubjectConfirmation elements representing two recipients (test 1 of 2, correct one first) ', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (69, 'Accept a Response with two SubjectConfirmation elements representing two recipients (test 1 of 2, correct one last)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (70, 'Accept a Response with two SubjectConfirmationData elements representing two recipients (test 1 of 2, correct one first)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (71, 'Accept a Response with two SubjectConfirmationData elements representing two recipients (test 1 of 2, correct one last)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (72, 'Accept multiple AudienceRestrictions where the intersection includes the correct audience.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (73, 'Accept that both the Response and the Assertion is signed', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (74, 'Accept that only the Assertion is signed instead of the Response', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (75, 'Accept that only the Response is signed instead of the Assertion', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (76, 'Accept xs:datetime with microsecond precision http://www.w3.org/TR/xmlschema-2/#dateTime', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (77, 'Accept xs:datetime with millisecond precision http://www.w3.org/TR/xmlschema-2/#dateTime', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (78, 'Does the SP allow the InResponseTo attribute to be missing from the Response element?', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (79, 'Does the SP allow the InResponseTo attribute to be missing from the SubjectConfirmationData element?', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (80, 'Find attributes in a second Assertion/AttributeStatement, not only in one of them (attributes in last)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (81, 'Find attributes in a second Assertion/AttributeStatement, not only in one of them attributes in first)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (82, 'Find attributes in a second AttributeStatement, (attributes in first and second statement)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (83, 'Reject a broken DestinationURL attribute', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (84, 'Reject a broken DestinationURL attribute in response', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (85, 'Reject a broken Recipient attribute in assertion SubjectConfirmationData/@Recipient', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (86, 'Reject a InResponseTo which is chosen randomly', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (87, 'Reject a InResponseTo which is chosen randomly (in assertion only)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (88, 'Reject a Response with a AuthnStatement missing', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (89, 'Reject a Response with a AuthnStatement where SessionNotOnOrAfter is set in the past', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (90, 'Reject a Response with a Condition with a empty set of Audience.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (91, 'Reject a Response with a Condition with a NotBefore in the future.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (92, 'Reject a Response with a Condition with a NotOnOrAfter in the past.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (93, 'Reject a Response with a Condition with a wrong Audience.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (94, 'Reject a Response with a SubjectConfirmationData elements with an incorrect @Address attribute', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (95, 'Reject a Response with a SubjectConfirmationData@NotOnOrAfter in the past', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (96, 'Reject an assertion containing an unknown Condition', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (97, 'Reject an IssueInstant far (24 hours) into the future', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (98, 'Reject an IssueInstant far (24 hours) into the past', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (99, 'Reject an signed assertion embedded in an AttributeValue inside an unsigned assertion.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (100, 'Reject an signed assertion embedded in an AttributeValue inside an unsigned assertion. (Signature moved out...)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (101, 'Reject an signed assertion, where the signature is referring to another assertion.', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (102, 'Reject attributes in unsigned 2nd assertion', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (103, 'Reject authnstatement in unsigned 2nd assertion', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (104, 'Reject multiple AudienceRestrictions where the intersection is zero', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (105, 'Reject a replayed Response. [Profiles]: 4.1.4.5 POST-Specific Processing Rules (test 1 of 2: inresponseto)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (106, 'Reject a replayed Response. [Profiles]: 4.1.4.5 POST-Specific Processing Rules (test 2 of 2: unsolicited response)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (107, 'Reject an ID used in previous request', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (108, 'Reject response when the saml-namespace is invalid', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (109, 'Accept unknown extension element (?)', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (110, 'Include valid AuthnContextClassRef in assertion', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (112, 'Require minimum LoA', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (113, 'NameID format: e-mail', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (114, 'NameID format: other than defined', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (115, 'NameID format: persistent', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (116, 'Replayed Assertions MUST NOT be accepted', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (117, 'SP should observe the response status', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (118, 'SubjectConfirmationData missing', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (119, 'The <Response> MUST be signed for the HTTP POST binding', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (120, '?Tolerate lost RelayState', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (121, 'Unsolicited response messages SHOULD be accepted', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (122, 'Unsolicited response messages SHOULD NOT be accepted', 21, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (123, 'Resistance against session fixation attack', 22, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (124, 'Multiple SP may have same keys', 9, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (125, 'Understand basic AuthnRequest/HTTP-artifact', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (126, 'Understand basic AuthnRequest/HTTP-redirect', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (127, 'Understand AuthnRequest with specific NameID Policy', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (128, 'Understand AuthnRequest/HTTP-POST', 19, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (129, 'Understand AuthnRequest/HTTP-POST with transient NameID', 20, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (130, 'Understand AuthnRequest/HTTP-redirect with transient NameID', 20, 0);
INSERT INTO requmgr_requirement (id, name, feature_id, operation_count) VALUES (131, 'authn_specified_endpoint', 19, 0);
